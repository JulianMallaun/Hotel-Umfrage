import streamlit as st
import pandas as pd
from datetime import date

import gspread
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="Befragung Lastflexibilit√§t ‚Äì Hotel", page_icon="üß≠", layout="wide")

# ---------- Meta ----------
st.title("Befragung Lastflexibilit√§t ‚Äì Hotel")
st.caption("Masterarbeit ‚Äì Intelligente Energiesysteme | ca. 20‚Äì30 Minuten")

with st.sidebar:
    st.header("Legende & Anleitung")
    st.write(
        """
        **So f√ºllen Sie den Fragebogen aus:**
        - **Vorhanden** ‚Üí Ger√§t im Hotel vorhanden?
        - **Leistung (kW)** ‚Üí wenn bekannt eintragen
        - **Bewertung der Kriterien** je Ger√§t (1‚Äì4):
            - **Modulation**: Wie fein l√§sst sich die Leistung anpassen?
            - **Dauer**: Wie lange kann die Leistung ver√§ndert werden?
            - **Rebound**: Gibt es einen Nachholeffekt nach der Anpassung?
            - **Betriebsfenster**: Wie frei ist der Betrieb zeitlich gestaltbar?
        
        **Skala (1‚Äì4):**
        1 = gering/rigide (z. B. <10 %, <15 min, ‚â•24 h, sehr starker Rebound)  
        2 = moderat (10‚Äì25 %, 15‚Äì45 min, 1‚Äì8 h, starker Rebound)  
        3 = gut (25‚Äì40 %, 45‚Äì120 min, 30‚Äì60 min, geringer Rebound)  
        4 = hoch/frei (‚â•40 %, ‚â•2 h, ‚â§15 min, kaum Rebound)
        """
    )
    st.info("Ihre Angaben werden anonymisiert und ausschlie√ülich zu wissenschaftlichen Zwecken verwendet.")

# ---------- Consent ----------
with st.expander("Einverst√§ndniserkl√§rung", expanded=True):
    st.write("""Mit Ihrer Teilnahme erkl√§ren Sie sich einverstanden, dass Ihre Angaben freiwillig erfolgen,
    anonymisiert und ausschlie√ülich zu wissenschaftlichen Zwecken verwendet werden und nicht auf einzelne Hotels oder Personen zur√ºckgef√ºhrt werden k√∂nnen.""")
    consent = st.checkbox("Ich habe die Informationen verstanden und bin mit der Teilnahme einverstanden.")

# ---------- Stammdaten ----------
st.subheader("Stammdaten")
col1, col2, col3, col4 = st.columns(4)
hotel = col1.text_input("Hotel")
bereich = col2.text_input("Bereich/Abteilung")
position = col3.text_input("Position")
datum = col4.date_input("Datum", value=date.today())
name = st.text_input("Name (optional)")

# ---------- Skalenbeschriftungen ----------
scale_labels = {
    "Modulation": ["1 (<10 %)", "2 (10‚Äì25 %)", "3 (25‚Äì40 %)", "4 (‚â•40 %)"],
    "Dauer": ["1 (<15 min)", "2 (15‚Äì45 min)", "3 (45‚Äì120 min)", "4 (‚â•2 h)"],
    "Rebound": ["1 (sehr stark)", "2 (stark)", "3 (gering)", "4 (kaum)"],
    "Betriebsfenster": ["1 (rigide)", "2 (begrenzt)", "3 (breit)", "4 (frei)"],
}

# ---------- Ger√§tekatalog ----------
catalog = [
    # A) K√ºche
    ("A1) K√ºhlung/K√§lte", [
        "Walk-in K√ºhlraum",
        "Walk-in Tiefk√ºhlraum",
        "K√ºhltische/Unterbauk√ºhler",
        "Getr√§nke-/Flaschenk√ºhler",
        "Eismaschine",
        "K√ºhlanlagenzentrale",
    ]),
    ("A2) Garger√§te/W√§rme", [
        "Kombid√§mpfer",
        "Konvektomat/Backofen",
        "Fritteuse",
        "Induktionsherd",
        "Kippbratpfanne",
        "Bain-Marie/Warmhalten",
        "Salamander",
    ]),
    ("A3) Geschirr- und Sp√ºlbereich", [
        "Haubensp√ºlmaschine",
        "Bandsp√ºlmaschine",
    ]),
    ("A4) L√ºftung", [
        "K√ºchenabluft (Haubenl√ºftung)",
    ]),
    # B) Wellness / Spa / Pool
    ("B1) Sauna/W√§rme", [
        "Finnische Sauna",
        "Biosauna",
    ]),
    ("B2) Dampfbad", [
        "Dampfsauna",
    ]),
    ("B3) Pools/Wassertechnik", [
        "Pool-Umw√§lzpumpe",
    ]),
    ("B4) L√ºftung/Entfeuchtung", [
        "Schwimmbad Abluft",
        "Schwimmbad Luftentfeuchtung",
    ]),
    # C) Zimmer & Allgemeinbereiche
    ("C1) Beleuchtung", [
        "Zimmerbeleuchtung",
        "Reklame/Aussenbeleuchtung",
    ]),
    ("C2) Vertikale F√∂rderung/Garage", [
        "Aufz√ºge",
    ]),
    ("C3) Laundry/Sonstiges", [
        "Waschmaschinen",
        "Trockner",
        "Wallbox (EV-Ladepunkte)",
    ]),
]

responses = []
st.markdown("---")
st.subheader("Bewertung der Ger√§te")

def render_device(section_key: str, device_name: str):
    key_prefix = f"{section_key}::{device_name}"
    cols = st.columns([1.2, 1, 1, 1, 1, 1.2])
    vorhanden = cols[0].checkbox("Vorhanden", key=f"{key_prefix}::vorhanden")
    leistung = None
    if device_name == "Zimmerbeleuchtung":
        betten = cols[1].number_input("Bettenanzahl", min_value=0, step=1, key=f"{key_prefix}::betten")
    else:
        leistung = cols[1].number_input("Leistung (kW)", min_value=0.0, step=0.1, format="%.1f", key=f"{key_prefix}::leistung")

    mod = cols[2].selectbox("Modulation", scale_labels["Modulation"], index=None, placeholder="Bitte w√§hlen", key=f"{key_prefix}::mod")
    dur = cols[3].selectbox("Dauer", scale_labels["Dauer"], index=None, placeholder="Bitte w√§hlen", key=f"{key_prefix}::dur")
    reb = cols[4].selectbox("Rebound", scale_labels["Rebound"], index=None, placeholder="Bitte w√§hlen", key=f"{key_prefix}::reb")
    win = cols[5].selectbox("Betriebsfenster", scale_labels["Betriebsfenster"], index=None, placeholder="Bitte w√§hlen", key=f"{key_prefix}::win")

    d = {
        "section": section_key,
        "geraet": device_name,
        "vorhanden": bool(vorhanden),
        "leistung_kw": None if device_name == "Zimmerbeleuchtung" else (leistung if leistung is not None else None),
        "bettenanzahl": (betten if device_name == "Zimmerbeleuchtung" else None),
        "modulation": mod,
        "dauer": dur,
        "rebound": reb,
        "betriebsfenster": win,
    }
    responses.append(d)

for sec, devices in catalog:
    st.markdown(f"### {sec}")
    for dev in devices:
        with st.container(border=True):
            render_device(sec, dev)

# ---------- Google Sheets helper ----------
def append_to_google_sheets(df: pd.DataFrame) -> bool:
    """
    Erwartet folgende Secrets in Streamlit:
      - st.secrets["gcp_service_account"] -> dict mit Service-Account JSON
      - st.secrets["sheet_url"] -> URL der Ziel-Tabelle
    """
    try:
        if "gcp_service_account" not in st.secrets or "sheet_url" not in st.secrets:
            st.error("Google Sheets ist noch nicht konfiguriert. Bitte 'gcp_service_account' und 'sheet_url' in den Streamlit-Secrets hinterlegen.")
            return False

        creds_dict = st.secrets["gcp_service_account"]
        sheet_url = st.secrets["sheet_url"]

        scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        credentials = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        gc = gspread.authorize(credentials)

        sh = gc.open_by_url(sheet_url)
        ws = sh.sheet1  # erste Tabelle/Worksheet

        # Wenn leer, Kopfzeile setzen
        if len(ws.get_all_values()) == 0:
            ws.append_row(list(df.columns))

        # Daten anh√§ngen
        rows = df.astype(str).values.tolist()
        ws.append_rows(rows, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        st.error(f"Fehler beim Schreiben nach Google Sheets: {e}")
        return False

# ---------- Submit ----------
st.markdown("---")
valid_meta = hotel.strip() != "" and bereich.strip() != "" and position.strip() != ""
if not consent:
    st.warning("Bitte Einverst√§ndnis best√§tigen.")
if not valid_meta:
    st.warning("Bitte Hotel, Bereich/Abteilung und Position angeben.")

submitted = st.button("Antworten pr√ºfen und bereitstellen")
if submitted and consent and valid_meta:
    df = pd.DataFrame(responses)
    # add meta
    df.insert(0, "hotel", hotel)
    df.insert(1, "bereich", bereich)
    df.insert(2, "position", position)
    df.insert(3, "datum", str(datum))
    df.insert(4, "name", name)

    st.success("Antworten erfasst. Sie k√∂nnen die Daten unten herunterladen.")
    st.dataframe(df, use_container_width=True)
    csv = df.to_csv(index=False).encode("utf-8")
    json_str = df.to_json(orient="records", force_ascii=False).encode("utf-8")
    st.download_button("CSV herunterladen", csv, file_name="befragung_antworten.csv", mime="text/csv")
    st.download_button("JSON herunterladen", json_str, file_name="befragung_antworten.json", mime="application/json")

    # Google Sheets push
    ok = append_to_google_sheets(df)
    if ok:
        st.success("‚úÖ Erfolgreich in Google Sheets gespeichert.")
    else:
        st.info("‚ÑπÔ∏è Noch nicht in Google Sheets gespeichert. Bitte Konfiguration pr√ºfen.")
else:
    st.caption("Wenn Sie alles ausgef√ºllt haben, klicken Sie auf ‚ÄûAntworten pr√ºfen und bereitstellen‚Äú.")
